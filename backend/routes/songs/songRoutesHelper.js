const supabase = require('../../supabase');
const axios = require('axios');
const { DateTime } = require('luxon');
const { v4: uuidv4 } = require('uuid');

function unixToTimestamptz(unixTimestamp) {
  return DateTime.fromSeconds(unixTimestamp)
    .toUTC()
    .toISO({ includeOffset: true, suppressMilliseconds: true });
}

async function storePlaylistData(userId, playlistName, playlistData) {
  await insertSongs(playlistData);
  console.log('Inserted songs into database');
  const spotify_access_token = await getValidAccessToken(userId);

  console.log('Creating playlist for user:', userId);

  const response = await supabase.from('users').select('spotify_username').eq('id', userId).single();
  const username = response.data.spotify_username;

  try {
    const playlistCreateResponse = await axios.post(
      `https://api.spotify.com/v1/users/${username}/playlists`,
      {
        name: playlistName,
        description: 'Generated by MusicVibe for you!',
        public: false
      },
      {
        headers: {
          Authorization: `Bearer ${spotify_access_token}`
        }
      }
    );


    console.log('Playlist create response:', playlistCreateResponse.data);
    
    const playlistId = playlistCreateResponse.data.id;
    const timeValue = Math.floor(Date.now() / 1000);
    const timestamptzString = unixToTimestamptz(timeValue);
    const playlistUrl = playlistCreateResponse.data.external_urls.spotify;
    console.log('Playlist URL:', playlistUrl);

    const response = await supabase.from('user_playlists').upsert({
      user_id: userId,
      playlist_id: playlistId,
      name: playlistName,
      created_at: timestamptzString,
      playlist_url: playlistUrl,
    });
    console.log('Upsert response:', response);
    console.log('user_id:', userId);
    console.log('playlist_id:', playlistId);
    console.log('created_at:', timestamptzString);
    console.log('playlist_url:', playlistUrl);
    const trackUris = await addPlaylistSongsToDB(playlistId, playlistData);
    console.log('Added songs to playlist:', trackUris);
    

    const responseN = await axios.post(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      { uris: trackUris },
      {
        headers: {
          Authorization: `Bearer ${spotify_access_token}`
        }
      }
    );
    console.log(responseN);
    await addCoverImage(playlistId, spotify_access_token);

    return playlistUrl;
  } catch (error) {
    console.error('Error creating playlist:', error);
    throw error;
  }
}

async function addPlaylistSongsToDB(playlistId, songs) {
  const now = DateTime.now().toUTC().toISO();
  const trackUris = [];
  const songsToInsert = [];
  for (const song of songs) {
    const trackUri = `spotify:track:${song.trackId}`;
    trackUris.push(trackUri);

    songsToInsert.push({
      playlist_id: playlistId,
      song_id: song.trackId,
      added_at: now,
      
    });
  }


  const { data, error } = await supabase
    .from('playlist_songs')
    .upsert(songsToInsert);

  if (error) {
    console.error('Error inserting songs into database:', error);
    throw error;
  }

  console.log(`Successfully inserted ${songsToInsert.length} songs into the database.`);

  return trackUris;
} 

async function getValidAccessToken(userId) {
  if (!userId) {
    console.error('User ID is undefined');
    throw new Error('User ID is required');
  }

  console.log('Getting valid access token for user:', userId);

  const { data, error } = await supabase
    .from('users')
    .select('access_token, expires_at, refresh_token')
    .eq('id', userId)
    .single();

  console.log('Data:', data);

  if (error) {
    throw error;
  }
  if (!data) {
    res.redirect('/login');
  }

  const now = DateTime.now().toUTC();
  const expiresAt = DateTime.fromISO(data.expires_at, { zone: 'utc' });

  console.log('Token expires at:', expiresAt.toISO());
  console.log('Current time:', now.toISO());

  if (now >= expiresAt) {
    console.log('Token expired');
    try {
      const refreshResponse = await axios.get(`http://localhost:3001/api/auth/refresh?userId=${userId}&refresh_token=${data.refresh_token}`);
      console.log('Refresh response:', refreshResponse.data);

      const newExpiresAt = DateTime.now().plus({ seconds: 3600 }).toUTC();

      await supabase.from('users').upsert({
        id: userId,
        access_token: refreshResponse.data.access_token,
        expires_at: newExpiresAt.toSQL({ includeOffset: true }),
        refresh_token: data.refresh_token
      }, {
        onConflict: 'id'
      });

      return refreshResponse.data.access_token;
    } catch (refreshError) {
      throw refreshError;
    }
  }
  
  return data.access_token;
}

async function refreshToken(userId, refresh_token) {
  console.log('Refreshing token for user:', userId);
  if (!refresh_token) {
    return res.status(400).json({ error: 'Refresh token not found' });
  }
  if (!userId) {
    return res.status(400).json({ error: 'User ID not found' });
  }
  try {
    const tokenResponse = await axios.post('https://accounts.spotify.com/api/token', querystring.stringify({
      grant_type: 'refresh_token',
      refresh_token: refresh_token,
      client_id: client_id,
      client_secret: client_secret,
    }), {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    });
    console.log('Token response:', tokenResponse.data);
    const { access_token, refresh_token, expires_in } = tokenResponse.data;
    const expiresAt = DateTime.now().plus({ seconds: 3600}).toUTC();
    const formattedExpiresAt = expiresAt.toSQL({ includeOffset: true });
    const response = await supabase.from('users').upsert({
      id: userId,
      access_token: access_token,
      refresh_token: refresh_token,

      expires_at: formattedExpiresAt,
    }, {
      onConflict: 'id',
    });
    console.log('Upsert response:', response);
    console.log('Upserted token:', access_token, userId);
    return res.json({
      access_token: access_token,
      refresh_token: refresh_token,
      expires_in: expires_in,
    }); 
  } catch (error) {
    return res.status(500).json({ error: 'Failed to exchange authorization code for token' });
  }
}

async function addCoverImage(playlistId, accessToken) {
  try {
    const response = await axios.get(`https://api.spotify.com/v1/playlists/${playlistId}/images`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });

    if (response.data && response.data.length > 0) {
      const playlistUrl = response.data[0].url;
    
      const { data, error } = await supabase
        .from('user_playlists')
        .update({ cover_image_url: playlistUrl })
        .eq('playlist_id', playlistId);

      if (error) {
        console.error('Error updating cover image URL:', error);
        throw error;
      }

      console.log('Cover image URL updated successfully');
      return playlistUrl;
    } else {
      console.warn('No cover image found for playlist');
      return null;
    }
  } catch (error) {
    console.error('Error in getCoverImage:', error);
    throw error;
  }
}

function parseSpotifyResponse(response) {
    const parsedTracks = response.tracks.map(track => {
        const trackName = track.name;
        const trackId = track.id;
        const trackUri = track.uri;
        const trackDuration = track.duration_ms; 
        const trackPopularity = track.popularity;
        const trackPreviewUrl = track.preview_url;
        const album = track.album;
        const albumName = album.name;
        const albumId = album.id;
        const albumUrl = album.external_urls.spotify;
        const albumImageUrl = album.images[0].url;
        const artist = track.artists[0]; 
        const artistName = artist.name;
        const artistId = artist.id;
        const artistUrl = artist.external_urls.spotify;
        
        return {
            trackName,
            trackId,
            trackUri,
            trackDuration,
            trackPopularity,
            trackPreviewUrl,
            albumName,
            albumId,
            albumUrl,
            albumImageUrl,
            artistName,
            artistId,
            artistUrl
        };
    });

    return parsedTracks;
}


async function insertSongs(songs) {
    for (const song of songs) {
      const { data, error } = await supabase
        .from('songs')
        .upsert({
          id: song.trackId,
          title: song.trackName,
          artist: song.artistName,
          album: song.albumName,
          duration: song.trackDuration,
          popularity: song.trackPopularity,
          preview_url: song.trackPreviewUrl,
          album_image_url: song.albumImageUrl
        }, {
          onConflict: 'id'
        });
  
      if (error) {
        return error;
      } else {
        console.log('Inserted/Updated song:', song.trackName);
      }
    }
  }

module.exports = { storePlaylistData,getValidAccessToken, parseSpotifyResponse, insertSongs };